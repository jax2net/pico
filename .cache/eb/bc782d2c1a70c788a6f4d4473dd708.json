{"id":"node_modules/server/plugins/final/errors.js","dependencies":[{"name":"/home/j/code/pico-game/package.json","includedInParent":true,"mtime":1650856783377},{"name":"/home/j/code/pico-game/node_modules/server/package.json","includedInParent":true,"mtime":1650856783017},{"name":"../../error","loc":{"line":1,"column":22,"index":22},"parent":"/home/j/code/pico-game/node_modules/server/plugins/final/errors.js","resolved":"/home/j/code/pico-game/node_modules/server/error/index.js"}],"generated":{"js":"var error = require('../../error')('/plugin/final/');\n\nerror.noreturn = function (_ref) {\n  var method = _ref.method,\n      url = _ref.url;\n  return \"\\nYour middleware did not return anything for this request:\\n\\n\".concat(method, \" \").concat(url, \"\\n\\nThis normally happens when no route was matched or if the router did not reply with anything. Make sure to return something, even if it's a catch-all error.\\n\\nDocumentation for reply: https://serverjs.io/documentation/reply/\\nRelevant issue: https://github.com/franciscop/server/issues/118\\n\");\n};\n\nerror.unhandled = \"\\nSome middleware threw an error that was not handled properly. This can happen when you do this:\\n\\n~~~\\n// BAD:\\nserver(ctx => { throw new Error('I am an error!'); });\\n~~~\\n\\nTo catch and handle these types of errors, add a route to the end of your middlewares to handle errors like this:\\n\\n~~~\\n// GOOD:\\nconst { error } = server.router;\\nconst { status } = server.reply;\\n\\nserver(\\n  ctx => { throw new Error('I am an error!'); },\\n  // ...\\n  error(ctx => status(500).send(ctx.error.message))\\n);\\n~~~\\n\\nPlease feel free to open an issue in Github asking for more info:\\nhttps://github.com/franciscop/server\\n\";\nmodule.exports = error;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":1,"column":0},"source":"node_modules/server/plugins/final/errors.js","original":{"line":1,"column":0}},{"name":"error","generated":{"line":1,"column":4},"source":"node_modules/server/plugins/final/errors.js","original":{"line":1,"column":6}},{"generated":{"line":1,"column":9},"source":"node_modules/server/plugins/final/errors.js","original":{"line":1,"column":11}},{"name":"require","generated":{"line":1,"column":12},"source":"node_modules/server/plugins/final/errors.js","original":{"line":1,"column":14}},{"generated":{"line":1,"column":19},"source":"node_modules/server/plugins/final/errors.js","original":{"line":1,"column":21}},{"generated":{"line":1,"column":20},"source":"node_modules/server/plugins/final/errors.js","original":{"line":1,"column":22}},{"generated":{"line":1,"column":33},"source":"node_modules/server/plugins/final/errors.js","original":{"line":1,"column":21}},{"generated":{"line":1,"column":34},"source":"node_modules/server/plugins/final/errors.js","original":{"line":1,"column":14}},{"generated":{"line":1,"column":35},"source":"node_modules/server/plugins/final/errors.js","original":{"line":1,"column":37}},{"generated":{"line":1,"column":51},"source":"node_modules/server/plugins/final/errors.js","original":{"line":1,"column":14}},{"generated":{"line":1,"column":52},"source":"node_modules/server/plugins/final/errors.js","original":{"line":1,"column":0}},{"name":"error","generated":{"line":3,"column":0},"source":"node_modules/server/plugins/final/errors.js","original":{"line":3,"column":0}},{"generated":{"line":3,"column":5},"source":"node_modules/server/plugins/final/errors.js","original":{"line":3,"column":5}},{"name":"noreturn","generated":{"line":3,"column":6},"source":"node_modules/server/plugins/final/errors.js","original":{"line":3,"column":6}},{"generated":{"line":3,"column":14},"source":"node_modules/server/plugins/final/errors.js","original":{"line":3,"column":0}},{"generated":{"line":3,"column":17},"source":"node_modules/server/plugins/final/errors.js","original":{"line":3,"column":17}},{"generated":{"line":4,"column":0},"source":"node_modules/server/plugins/final/errors.js","original":{"line":3,"column":17}},{"name":"method","generated":{"line":4,"column":6},"source":"node_modules/server/plugins/final/errors.js","original":{"line":3,"column":20}},{"generated":{"line":4,"column":12},"source":"node_modules/server/plugins/final/errors.js","original":{"line":3,"column":17}},{"name":"method","generated":{"line":4,"column":20},"source":"node_modules/server/plugins/final/errors.js","original":{"line":3,"column":20}},{"generated":{"line":4,"column":26},"source":"node_modules/server/plugins/final/errors.js","original":{"line":3,"column":17}},{"generated":{"line":5,"column":0},"source":"node_modules/server/plugins/final/errors.js","original":{"line":3,"column":17}},{"name":"url","generated":{"line":5,"column":6},"source":"node_modules/server/plugins/final/errors.js","original":{"line":3,"column":28}},{"generated":{"line":5,"column":9},"source":"node_modules/server/plugins/final/errors.js","original":{"line":3,"column":17}},{"name":"url","generated":{"line":5,"column":17},"source":"node_modules/server/plugins/final/errors.js","original":{"line":3,"column":28}},{"generated":{"line":5,"column":20},"source":"node_modules/server/plugins/final/errors.js","original":{"line":3,"column":17}},{"generated":{"line":6,"column":0},"source":"node_modules/server/plugins/final/errors.js","original":{"line":3,"column":17}},{"name":"method","generated":{"line":6,"column":82},"source":"node_modules/server/plugins/final/errors.js","original":{"line":6,"column":2}},{"generated":{"line":6,"column":88},"source":"node_modules/server/plugins/final/errors.js","original":{"line":3,"column":17}},{"name":"url","generated":{"line":6,"column":102},"source":"node_modules/server/plugins/final/errors.js","original":{"line":6,"column":12}},{"generated":{"line":6,"column":105},"source":"node_modules/server/plugins/final/errors.js","original":{"line":3,"column":17}},{"generated":{"line":7,"column":0},"source":"node_modules/server/plugins/final/errors.js","original":{"line":3,"column":17}},{"generated":{"line":7,"column":1},"source":"node_modules/server/plugins/final/errors.js","original":{"line":3,"column":0}},{"name":"error","generated":{"line":9,"column":0},"source":"node_modules/server/plugins/final/errors.js","original":{"line":14,"column":0}},{"generated":{"line":9,"column":5},"source":"node_modules/server/plugins/final/errors.js","original":{"line":14,"column":5}},{"name":"unhandled","generated":{"line":9,"column":6},"source":"node_modules/server/plugins/final/errors.js","original":{"line":14,"column":6}},{"generated":{"line":9,"column":15},"source":"node_modules/server/plugins/final/errors.js","original":{"line":14,"column":0}},{"name":"module","generated":{"line":10,"column":0},"source":"node_modules/server/plugins/final/errors.js","original":{"line":40,"column":0}},{"generated":{"line":10,"column":6},"source":"node_modules/server/plugins/final/errors.js","original":{"line":40,"column":6}},{"name":"exports","generated":{"line":10,"column":7},"source":"node_modules/server/plugins/final/errors.js","original":{"line":40,"column":7}},{"generated":{"line":10,"column":14},"source":"node_modules/server/plugins/final/errors.js","original":{"line":40,"column":0}},{"name":"error","generated":{"line":10,"column":17},"source":"node_modules/server/plugins/final/errors.js","original":{"line":40,"column":17}},{"generated":{"line":10,"column":22},"source":"node_modules/server/plugins/final/errors.js","original":{"line":40,"column":0}}],"sources":{"node_modules/server/plugins/final/errors.js":"const error = require('../../error')('/plugin/final/');\n\nerror.noreturn = ({ method, url }) => `\nYour middleware did not return anything for this request:\n\n${method} ${url}\n\nThis normally happens when no route was matched or if the router did not reply with anything. Make sure to return something, even if it's a catch-all error.\n\nDocumentation for reply: https://serverjs.io/documentation/reply/\nRelevant issue: https://github.com/franciscop/server/issues/118\n`;\n\nerror.unhandled = `\nSome middleware threw an error that was not handled properly. This can happen when you do this:\n\n~~~\n// BAD:\nserver(ctx => { throw new Error('I am an error!'); });\n~~~\n\nTo catch and handle these types of errors, add a route to the end of your middlewares to handle errors like this:\n\n~~~\n// GOOD:\nconst { error } = server.router;\nconst { status } = server.reply;\n\nserver(\n  ctx => { throw new Error('I am an error!'); },\n  // ...\n  error(ctx => status(500).send(ctx.error.message))\n);\n~~~\n\nPlease feel free to open an issue in Github asking for more info:\nhttps://github.com/franciscop/server\n`;\n\nmodule.exports = error;\n"},"lineCount":null}},"error":null,"hash":"45e2ac97d9e48d5cc33b0d1c7ea588d0","cacheData":{"env":{}}}